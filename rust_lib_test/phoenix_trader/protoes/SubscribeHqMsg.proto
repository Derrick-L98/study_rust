//行情相关接口文件
syntax = "proto3";

package hqcenter;

import "HqMsg.proto";

service SvrPostSubscribeHqMsg{
  rpc post_subscribe_hq_msg(SubscribeHqMsgReq) returns (ResultMsg) {}	//行情订阅接口
  
  rpc post_history_kline_hq(KLineHqReq) returns(KLineHqResp){};			//历史K线请求
  rpc post_current_kline_hq(KLineHqReq) returns(KLineHqResp){};			//当前K线
  rpc post_history_fenshi_hq (KLineHqReq) returns(KLineHqResp){};		//历史分时
  rpc post_current_fenshi_hq (KLineHqReq) returns(KLineHqResp){};		//当前分时
  
  rpc post_tick_hq(TickHqReq) returns (TickHqResp) {};				//最新TICK数据

  rpc get_last_price(LastPriceMsgReq) returns (LastPriceMsgResp) {} //最新价获取
}


message SubscribeHqMsgReq {
	int32		action = 1;				//动作类型 1：订阅，0：取消订阅。
	string		goods = 2;			    //品种代码
	string		exchange_no = 3;		//市场代码
	string		contract_no = 4;		//合约编号
	string		id = 5;					//Redis中对应ID
	string    	commodity_type= 6;		//商品类型，期货为F
}

// 回复的数据包
message ResultMsg {
	string err_msg = 1;
	int32  err_code = 2;                 //0 代表成功，其他错误码自行定义
}

message TickHqReq {
	string  contract_no = 1;		//合约编号可选
	int32	tick_type = 2;			//请求行情类型 0:1档行情(默认) 1:5档行情
	int64   tick_time = 3;        //请求tick时间 unix时间
	int32   real_time = 4;            //0 延迟行情  1实时行情  
}

message TickHqResp {
	repeated hqmsg.YsHqInfo tick_hq_info = 1; 
}

//备注:历史K线请求必传：合约编号,结束时间, 条数。当前K线请求：传条数 ,合约 
//历史分时请求：只传合约编号拼接日期 合约编号值为：合约|日期。 当前分时请求:合约+日期   例如:CL1810|20180910 
message KLineHqReq {
	string  contract_no = 1;		//合约编号
	string	kline_type = 2;		//1:一分钟 5:5分钟, 10:10分钟,30: 30分钟, 60：60分钟,24:日线
	string  end_time = 3;			//结束时间
	int32	limit = 4;				//条数
	int32   real_time = 5;           //0 延迟行情  1实时行情  
}

message KLineHqResp {
	repeated KLineHqInfo kline_info = 1; 
}

message KLineHqInfo {
	string kline = 1;
}

message LastPriceMsgReq 
{
    string	stock_code 		= 1;		//证券代码 60001
    int32	exchange_id 	= 2;		//市场 沪深:101 102 港:103 ...
}

message LastPriceMsgResp
{
    int32  err_code = 1;
    string err_msg = 2;
    LastPriceInfo data = 3;
}

message LastPriceInfo
{
    double  last_price = 1;             //最新价
    double  change_rate = 2;            //涨幅
    double  change_value = 3;           //涨跌
}
