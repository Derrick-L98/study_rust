//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "phoenix_ord_stockdeal")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  #[sea_orm(unique)]
  pub deal_no: i64,
  pub sys_date: i32,
  pub order_no: i64,
  pub exchange_id: i32,
  pub unit_id: i64,
  pub stock_id: i64,
  pub stock_code: String,
  pub order_direction: i32,
  pub deal_time: i32,
  pub deal_amount: i32,
  #[sea_orm(column_type = "Decimal(Some((16, 8)))")]
  pub deal_price: Decimal,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_jy: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_gh: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_yj: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_js: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_zg: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_qt: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_js2: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_jg: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_yh: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_real_yj: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
  pub fee_total: Option<Decimal>,
  pub exec_no: Option<String>,
  pub channel_type: Option<i32>,
  pub channel_id: Option<i32>,
  #[sea_orm(column_type = "Decimal(Some((16, 4)))", nullable)]
  pub refer_profit: Option<Decimal>,
  pub trade_type: i32,
  pub create_time: i64,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
  fn def(&self) -> RelationDef {
    panic!("No RelationDef")
  }
}

impl ActiveModelBehavior for ActiveModel {}
